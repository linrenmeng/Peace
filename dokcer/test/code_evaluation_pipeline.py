from git_checkout import switch_repo_to_sha
from function_replacer import replace_function_in_file
from test_performance_extractor import run_test_after_modification, extract_cpu_instr, extract_mem_usage


def evaluate(data):
    """
    Evaluate the performance of a function after code replacement.

    Args:
        data (dict): A dictionary containing necessary information for evaluation.
            Keys include:
                - repo_path: Path to the repository.
                - file_path: Path to the file containing the function.
                - sha: Git commit SHA to switch the repository to.
                - function_name: Name of the function to be replaced.
                - class_name: Name of the class if the function is a method.
                - venv_path: Path to the Python virtual environment.
                - test_cmd: Test command to run.
                - after_code: New code for the function.

    Returns:
        tuple: A tuple containing CPU instruction count and memory usage.
    """
    # Extract data from the input dictionary
    repo_path = data["repo_path"]
    file_path = data["file_path"]
    sha = data["sha"]
    function_name = data["function_name"]
    class_name = data["class_name"]
    venv_path = data["venv_path"]
    test_cmd = data["test_cmd"]
    after_code = data["after_code"]

    # Switch the repository to the specified version
    switch_repo_to_sha(repo_path, sha)

    # Replace the function with the code generated by LLM
    replace_function_in_file(file_path, class_name, function_name, after_code)

    # Run the test and get the output
    output = run_test_after_modification(repo_path, venv_path, test_cmd)

    # Extract CPU instruction count and memory usage from the output
    cpu_instr = extract_cpu_instr(output)
    mem_usage = extract_mem_usage(output)

    return cpu_instr, mem_usage


def main():
    """
    Main function to perform the evaluation.
    """
    # Sample data for evaluation
    data = {
        "repo_path": "your_repo_path",
        "venv_path": "your_venv_path",
        "test_cmd": "your_test_command",
        "sha": "your_git_commit_sha",
        "function_name": "your_function_name",
        "class_name": "your_class_name",
        "file_path": "your_file_path",
        "after_code": "your_new_function_code"
    }

    # Perform the evaluation
    cpu_instr, mem_usage = evaluate(data)

    # Print the results
    print(cpu_instr, mem_usage)


if __name__ == "__main__":
    main()